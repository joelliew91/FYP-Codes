hist(pred_y1,freq = 100)
hist(pred_y1,breaks = 100)
sum(pred_y1)
sum(pred_y15)
install.packages('quantmod')
install.packages("quantmod")
library(quantmod)
install.packages('PerformanceAnalytics')
qt(2,0.025)
?qt
pt(0.025,2)
qt(0.025,2)
qt(0.975,2)
rejectsampling
library(LearnBayes)
rejectsampling
impsampling
?impsampling
sir
rwmetrop
pb =10
c(pb,1)
test<-function(logf,...){
val = logf(...)
return(val)
}
test(mean,c(1,2,3))
library(LearnBayes)
indepmetrop
?logmultinorm
?rbinom
rbinom(1,10,0.5)
rbinom(10,10,0.5)
rbinom(10,1,0.5)
rbinom(2,2,c(0.01,0.99))
rbinom(2,3,c(0.01,0.99))
rbinom(2,4,c(0.01,0.99))
rbinom(2,10000,c(0.01,0.99))
rbinom(2,100,c(0.01,0.99))
rbinom(2,100,c(0.01,0.99,0.0001,0.001,0.001))
rbinom(5,100,c(0.01,0.99,0.0001,0.001,0.001))
rbinom(10,100,c(0.01,0.99,0.0001,0.001,0.001))
rbinom(5,100,c(0.01,0.99,0.0001,0.001,0.001))
rbinom(1000,10,0.001)
rbinom(1000,10,0.1)
rbinom(100,10,0.1)
rbinom(100,100,0.1)
rbinom(100,200,0.1)
rbinom(100,300,0.1)
rbinom(100,400,0.1)
rbinom(100,500,0.1)
rbinom(100,1083,0.1)
install.packages('data.table')
data = as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=30000))
library(data.table)
data = as.data.table(data)
head(data)
class(data[1,2])
data[1,2]
data[1,3]
data = as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=30000,headers=T))
?read.csv
data = as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=30000,header=T))
data = as.data.table(data)
head(data)
names(data)
names(data) = c('Day','Date','Bid','Asl')
names(data) = c('Day,Date','Bid','Ask')
head(data)
data[1,1]
data[1,2]
data[1,3]
test = data[1,1:20]
test
test = data[1:20,1]
test
test = data[,1]
head(test)
names(data) = c('DD','Bid','Ask')
head(data)
test = data$DD[1:20]
test
test1 = as.ITime(test_)
test1 = as.ITime(test)
test1
class(test1[1])
test1[2]-test1[1]
test
test[1]
test1[1]
round(test1[1])
test1[1]+5
test1[1]+300
as.Date(test1)
as.Date(test)
as.Date.date(test)
as.Date.default(test)
as.Date.POSIXct(test)
as.Date.POSIXlt(test)
as.Date.POSIXlt(x=test)
?as.Date.POSIXlt
q
q = test[1]
q
q[1]
q(1)
substr(q,start=1,stop=8)
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
test = reconstructor(10000)
test
test$time
test$time[2:10] - test$time[1:9]
?seq
seq(from=as.ITime('00:00:00'),to=as.ITime('23:59:00'),by=360)
as.ITime(0)
?as.drifttime
?as.difftime
?as.ITime
?as.POSIXct
as.POSIXct(360)
as.POSIXct(360,tz="GMT")
as.POSIXct(360,tz="GMT",origin='12/12/2015')
as.POSIXct(360,origin='12/12/2015')
as.POSIXct(360,origin='12/12/2015',tz='GMT')
as.ITime('00:00:00')+300
as.ITime('23:56:00')+300
(as.ITime('23:56:00')+300)%86400
(as.ITime('23:56:00')+300)<as.ITime('24:00:00')
(as.ITime('23:56:00')+300)<as.ITime('25:00:00')
(as.ITime('23:56:00')+30)<as.ITime('24:00:00')
source('~/Desktop/algo.R')
no = 24*60/30
r = seq(0,no-1)
t = as.ITime('00:00:00')+r*30*60
t
as.ITime('00:00:00')
as.ITime('00:00:00')+300
class(r)
r
r+as.ITime('00:00:00')
for(i in r){}
t = as.ITime('00:00:00')+r[1]
t
t = as.ITime('00:00:00')+r[1]*60*30
t
t = as.ITime('00:00:00')+r[2]*60*30
t
t = as.ITime('00:00:00')+r[1]*60*30
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
timeframe = 15
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=0,to=no_of_candles-1)
t = c()
for(i in range_of_candles){
t = c(t,as.ITime('00:00:00')+i*timeframe*60)
}
t
source('~/Desktop/algo.R')
t = c()
for(i in 1:length(range_of_candles)){
t = c(t,as.ITime('00:00:00')+range_of_candles[i]*timeframe*60)
}
t
t = c(as.ITime('00:00:00'))
for(i in 2:length(range_of_candles)){
t = c(t,t[i-1]+timeframe*60)
}
t
t
t = c(as.ITime('00:00:00'))
t
t = as.ITime('00:00:00')
for(i in 2:length(range_of_candles)){
t = rbind(t,t[i-1]+timeframe*60)
}
t
t = as.ITime('00:00:00')
t
test = c(t+300)
test
t +c(300)
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=0,to=no_of_candles-1)*timeframe*60
t = as.ITime('00:00:00')+range_of_candles
t
t +c(300,500)
t = as.ITime('00:00:00')
test = t+c(100,200)
test
a[1] = t+100
a = t+100
a
a[2] = a[1]+100
a
timeframe
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles-1)*timeframe*60
t = as.ITime('00:00:00')
for(i in range_of_candles){
t[i+1] = t[i]+range_of_candles[i]
}
t
t
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles-1)*timeframe*60
t = as.ITime('00:00:00')
for(i in 1:length(range_of_candles)){
t[i+1] = t[i]+range_of_candles[i]
}
t
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles-1)
t = as.ITime('00:00:00')
for(i in 1:length(range_of_candles)){
t[i+1] = t[i]+timeframe*60
}
t
t[2]-t[1]
t[2]-t[1]==as.ITime('00:15:00')
t[2]-t[1]<as.ITime('00:15:00')
t[1]-t[2]
t[1]-t[2]<0
t[1]+t[2]<0
t[1]+t[2]>0
i=1
i++
1
t
length(t)
96%96
96%%96
1%%96
91%%96
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
reconstructor(1000)
rows=1000
source('~/Desktop/algo.R')
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles-1)
t = as.ITime('00:00:00')
for(i in 1:length(range_of_candles)){
t[i+1] = t[i]+timeframe*60
}
data = as.data.table(as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=rows,header=T)))
names(data) = c('time','bid','ask')
data$date = substr(data$time,start=1,stop=8)
data$time = as.ITime(data$time)
ind = 1
i=1
j=1
candle_no=1
candle_store=c()
timeframe=5
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles-1)
t = as.ITime('00:00:00')
for(i in 1:length(range_of_candles)){
t[i+1] = t[i]+timeframe*60
}
rows=1000
data = as.data.table(as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=rows,header=T)))
names(data) = c('time','bid','ask')
data$date = substr(data$time,start=1,stop=8)
data$time = as.ITime(data$time)
ind = 1
i=1
j=1
candle_no=1
candle_store=c()
t
t[1]<data$time[1]
data$time[1]
while(t[i]<data$time[j]){
i = i+1
if(i==length(t)+1)
i=1
}
i
t[i]
data$time[j]
while(t[i]>data$time[j]){
candle_store=c(candle_store,candle_no)
j=j+1
}
candle_store
data$time[j]
data$time[j-1]
t[i]
t[i]<data$time[j]
length(t)
while(t[i]<data$time[j]){
i = i+1
if(i==length(t)+1)
i=1
}
candle_no=candle_no+1
while(t[i]>data$time[j]){
candle_store=c(candle_store,candle_no)
j=j+1
}
candle_store
data$time[j]
source('~/Desktop/algo.R')
data = reconstructor(10000,timeframe=60)
library(xts)
install.packages('xts')
install.packages("xts")
library(xts)
?coredata
data =       data = as.data.table(as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=rows,header=T)))
head(data)
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles-1)
t = as.ITime('00:00:00')
for(i in 1:length(range_of_candles)){
t[i+1] = t[i]+timeframe*60
}
data = as.data.table(as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=rows,header=T)))
names(data) = c('time','bid','ask')
data$date = substr(data$time,start=1,stop=8)
data$time = as.ITime(data$time)
head(data)
xtsdata <- xts(x = coredata(AAPL), order.by = time[1:n])
?xts
data
time <- seq(as.POSIXct("2014-06-28"), as.POSIXct("2014-07-10"), by = "5 mins")
time = seq(as.POSIXct(data$date[1]),as.POSIXct(data$date[length(data$date)]),by='5 mins')
head(time)
time = seq(as.POSIXct(data$date[1]),as.POSIXct(data$date[length(data$date)]),by='5 mins',tz='GMT')
time
xtsdata <- xts(x = coredata(data), order.by = time[1:length(time)])
xtsdata <- xts(x = coredata(data), order.by = time[1:NROW(data)])
head(xtsdata)
xtsdata <- xts(x = coredata(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=rows,header=T)), order.by = time[1:rows])
head(xtsdata)
install.packages('highfrequency')
test = data('sample_data')
library(highfrequency)
test = data('sample_data')
test = data('sample_tdata')
head(test)
test
data("sample_tdata")
head(sample_tdata)
class(sample_tdata)
aggregatePrice(ts,FUN = previoustick,on="minutes",k=1,
marketopen = "09:30:00", marketclose = "16:00:00", tz = "GMT")
q = aggregatePrice(sample_tdata,k=5)
head(q)
head(sample_tdata)
data("sample_tdata");
#aggregate price data to the 30 second frequency
head(sample_tdata$PRICE)
head(aggregatePrice(sample_tdata$PRICE,on="secs",k=30))
aggregatePrice
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
test = reconstructor(1000)
library(data.table)
test = reconstructor(1000)
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles-1)
t = as.ITime('00:00:00')
for(i in 1:length(range_of_candles)){
t[i+1] = t[i]+timeframe*60
}
data = as.data.table(as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=rows,header=T)))
names(data) = c('time','bid','ask')
data$date = substr(data$time,start=1,stop=8)
data$time = as.ITime(data$time)
ind = 1
i=1
j=1
candle_no=1
candle_store=c()
while(t[i]<data$time[j]){
i = i+1
if(i==length(t)+1)
i=1
}
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
head(data)
data$candle[1]=1
data$candle[2]=10
head(data
)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
head(t)
con = as.data.table(t)
con = as.data.table(time=t)
con = data.frame(time=t)
head(con)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
data$time[j]
t[i]
t[1]
source('~/Desktop/algo.R')
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
data$time[671]
t[287]
t[287]<data$time[671]
t[288]<data$time[671]
t[288]
t[289]
t[1]<data$time[671]
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
no_of_candles = 24*60/timeframe
range_of_candles = seq(from=1,to=no_of_candles)
t = as.ITime('00:00:00')
for(i in 1:length(range_of_candles)){
t[i+1] = t[i]+timeframe*60
}
data = as.data.table(as.data.frame(read.csv('~/Desktop/Data/EURUSD/7D2FD666A73562286E1936BDD1DCFFCD.csv',nrows=rows,header=T)))
names(data) = c('time','bid','ask')
data$date = substr(data$time,start=1,stop=8)
data$time = as.ITime(data$time)
ind = 1
i=1
j=1
candle_no=1
t
t[289]>data$time[j]
t[289]>data$time[100]
t[289]-data$time[24]
data$time[24]
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(1000,timeframe=5)
source('~/Desktop/algo.R')
test = reconstructor(10000,timeframe=5)
head(test0)
head(test)
test
View(test)
source('~/Desktop/algo.R')
test = reconstructor(100000,timeframe=5)
View(test)
test$date[100000]
test$date[1]
test[50000:55000,]
test[50000:55000,1:4]
source('~/Desktop/algo.R')
nrows(test,100)
print(test,nrows=100)
getwd()
setwd('~/Desktop/FYP/Codes/')
source('new.R')
source('new.R')
source('new.R')
data = sim_svvg(10)
test = mcmc_para(data,iterations=100)
head(data)
test = mcmc_para(data,iterations=100)
names(data)
test = mcmc_para(data$y,iterations=100)
test = mcmc_para(data$y,iterations=100)
source('all.R')
source('new.R')
source('new.R')
data = sim_svvg(10)
test = mcmc_para(data$y,iterations=100)
head(test)
test
mean(test$mu)
source('new.R')
test = mcmc_para(data$y,iterations=100)
source('new.R')
test = mcmc_para(data$y,iterations=100)
test = mcmc_para(data$y,iterations=100)
source('new.R')
test = mcmc_para(data$y,iterations=100)
library(LearnBayes)
rwmetrop
is.na(NaN)
source('new.R')
test = mcmc_para(data$y,iterations=100)
source('new.R')
test = mcmc_para(data$y,iterations=100)
test$mu
test
test = mcmc_para(data$y,iterations=100)
test
source('new.R')
test = mcmc_para(data$y,iterations=100)
test
